// <auto-generated />
using System;
using BookStore.Entity.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BookStore.Api.Migrations
{
    [DbContext(typeof(BookDbContext))]
    [Migration("20190619071048_BookStoreMig")]
    partial class BookStoreMig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BookStore.Entity.Document", b =>
                {
                    b.Property<Guid>("DOCUMENT_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CONTENT_TYPE");

                    b.Property<string>("FILE_NAME");

                    b.Property<string>("FULL_PATH");

                    b.HasKey("DOCUMENT_ID");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("BookStore.Entity.Models.Author", b =>
                {
                    b.Property<Guid>("AUTHOR_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AUTHOR_NAME")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("BIOGRAPHY");

                    b.Property<DateTime>("BIRTH_DATE");

                    b.HasKey("AUTHOR_ID");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("BookStore.Entity.Models.Book", b =>
                {
                    b.Property<Guid>("BOOK_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AUTHOR_ID_FK");

                    b.Property<Guid>("CATEGORY_ID_FK");

                    b.Property<Guid>("DOCUMENT_ID_FK");

                    b.Property<string>("NAME")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<Guid>("PUBLISHER_ID_FK");

                    b.Property<Guid>("SHOP_ID_FK");

                    b.Property<string>("SUMMARY")
                        .IsRequired();

                    b.HasKey("BOOK_ID");

                    b.HasIndex("AUTHOR_ID_FK");

                    b.HasIndex("CATEGORY_ID_FK");

                    b.HasIndex("DOCUMENT_ID_FK");

                    b.HasIndex("PUBLISHER_ID_FK");

                    b.HasIndex("SHOP_ID_FK");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("BookStore.Entity.Models.Category", b =>
                {
                    b.Property<Guid>("CATEGORY_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IS_MAIN_CATEGORY");

                    b.Property<string>("NAME")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("SUMMARY")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("CATEGORY_ID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BookStore.Entity.Models.Publisher", b =>
                {
                    b.Property<Guid>("PUBLISHER_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LOCATION");

                    b.Property<string>("NAME")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<Guid>("SUPPLIER_ID_FK");

                    b.HasKey("PUBLISHER_ID");

                    b.HasIndex("SUPPLIER_ID_FK");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("BookStore.Entity.Models.Shop", b =>
                {
                    b.Property<Guid>("SHOP_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LOCATION");

                    b.Property<string>("SHOP_NAME")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("STAFF_COUNT");

                    b.HasKey("SHOP_ID");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("BookStore.Entity.Models.Supplier", b =>
                {
                    b.Property<Guid>("SUPPLIER_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SUPPLIER_NAME")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("SUPPLIER_REGION")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("SUPPLIER_ID");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("BookStore.Entity.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CREATED_BY")
                        .IsRequired();

                    b.Property<DateTime>("CREATED_DATE");

                    b.Property<string>("EMAIL_ADDRESS")
                        .IsRequired();

                    b.Property<bool>("EMAIL_CONFIRMED");

                    b.Property<byte>("ROLE");

                    b.Property<string>("UPDATED_BY");

                    b.Property<DateTime>("UPDATED_DATE");

                    b.Property<string>("USER_NAME")
                        .IsRequired();

                    b.Property<string>("VERIFICATION_CODE");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BookStore.Entity.Models.User_Book", b =>
                {
                    b.Property<Guid>("BOOK_ID_FK")
                        .HasColumnName("BOOK_ID_FK");

                    b.Property<Guid>("USER_ID_FK")
                        .HasColumnName("USER_ID_FK");

                    b.HasKey("BOOK_ID_FK", "USER_ID_FK");

                    b.HasIndex("USER_ID_FK");

                    b.ToTable("User_Book");
                });

            modelBuilder.Entity("BookStore.Entity.Models.User_Log", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CREATED_BY")
                        .IsRequired();

                    b.Property<DateTime>("CREATED_DATE");

                    b.Property<DateTime>("LOGIN_DATE");

                    b.Property<DateTime>("LOGOUT_DATE");

                    b.Property<string>("TOKEN");

                    b.Property<string>("UPDATED_BY");

                    b.Property<DateTime>("UPDATED_DATE");

                    b.Property<Guid>("USER_ID_FK");

                    b.HasKey("ID");

                    b.HasIndex("USER_ID_FK");

                    b.ToTable("User_Log");
                });

            modelBuilder.Entity("BookStore.Entity.Models.User_Password", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CREATED_BY")
                        .IsRequired();

                    b.Property<DateTime>("CREATED_DATE");

                    b.Property<bool>("IS_ACTIVE");

                    b.Property<string>("PASSWORD_HASH")
                        .IsRequired();

                    b.Property<string>("UPDATED_BY");

                    b.Property<DateTime>("UPDATED_DATE");

                    b.Property<Guid>("USER_ID_FK");

                    b.HasKey("ID");

                    b.HasIndex("USER_ID_FK");

                    b.ToTable("User_Password");
                });

            modelBuilder.Entity("BookStore.Entity.Models.User_Profile", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ADDRESS")
                        .IsRequired();

                    b.Property<DateTime>("BIRTHDATE");

                    b.Property<string>("CREATED_BY")
                        .IsRequired();

                    b.Property<DateTime>("CREATED_DATE");

                    b.Property<string>("NAME")
                        .IsRequired();

                    b.Property<string>("SURNAME")
                        .IsRequired();

                    b.Property<string>("UPDATED_BY");

                    b.Property<DateTime>("UPDATED_DATE");

                    b.Property<Guid>("USER_ID_FK");

                    b.HasKey("ID");

                    b.HasIndex("USER_ID_FK");

                    b.ToTable("User_Profile");
                });

            modelBuilder.Entity("BookStore.Entity.Models.Book", b =>
                {
                    b.HasOne("BookStore.Entity.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AUTHOR_ID_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookStore.Entity.Models.Category", "Category")
                        .WithMany("books")
                        .HasForeignKey("CATEGORY_ID_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookStore.Entity.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DOCUMENT_ID_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookStore.Entity.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PUBLISHER_ID_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookStore.Entity.Models.Shop", "Shop")
                        .WithMany("books")
                        .HasForeignKey("SHOP_ID_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Entity.Models.Publisher", b =>
                {
                    b.HasOne("BookStore.Entity.Models.Supplier", "Supplier")
                        .WithMany("Publishers")
                        .HasForeignKey("SUPPLIER_ID_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Entity.Models.User_Book", b =>
                {
                    b.HasOne("BookStore.Entity.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BOOK_ID_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookStore.Entity.Models.User", "User")
                        .WithMany("User_Books")
                        .HasForeignKey("USER_ID_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Entity.Models.User_Log", b =>
                {
                    b.HasOne("BookStore.Entity.Models.User", "User")
                        .WithMany("User_Logs")
                        .HasForeignKey("USER_ID_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Entity.Models.User_Password", b =>
                {
                    b.HasOne("BookStore.Entity.Models.User", "User")
                        .WithMany("User_Passwords")
                        .HasForeignKey("USER_ID_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.Entity.Models.User_Profile", b =>
                {
                    b.HasOne("BookStore.Entity.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("USER_ID_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
